{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n    };\n  }, [ref, handler]);\n};\n\nconst useBreakpoint = queries => {\n  const [queryMatch, setQueryMatch] = useState(null);\n  useEffect(() => {\n    const mediaQueryLists = {};\n    const keys = Object.keys(queries); // to check whether event listener is attached or not\n\n    let isAttached = false;\n\n    const handleQueryListener = () => {\n      const updatedMatches = keys.reduce((acc, media) => {\n        acc[media] = !!(mediaQueryLists[media] && mediaQueryLists[media].matches);\n        return acc;\n      }, {}); // setting state to the updated matches when document either starts or stops matching a query\n\n      setQueryMatch(updatedMatches);\n    };\n\n    if (window && window.matchMedia) {\n      const matches = {};\n      keys.forEach(media => {\n        if (typeof queries[media] === 'string') {\n          mediaQueryLists[media] = window.matchMedia(queries[media]);\n          matches[media] = mediaQueryLists[media].matches;\n        } else {\n          matches[media] = false;\n        }\n      }); // setting state to initial matching queries\n\n      setQueryMatch(matches);\n      isAttached = true;\n      keys.forEach(media => {\n        if (typeof queries[media] === 'string') {\n          mediaQueryLists[media].addListener(handleQueryListener);\n        }\n      });\n    }\n\n    return () => {\n      // if event listener is attached then remove it when deps change\n      if (isAttached) {\n        keys.forEach(media => {\n          if (typeof queries[media] === 'string') {\n            mediaQueryLists[media].removeListener(handleQueryListener);\n          }\n        });\n      }\n    };\n  }, [queries]);\n  return queryMatch;\n};\n\nexport { useOnClickOutside, useBreakpoint };","map":{"version":3,"sources":["/Users/jyotinlad/GIT/portfoliotest/src/hooks.js"],"names":["useEffect","useState","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener","useBreakpoint","queries","queryMatch","setQueryMatch","mediaQueryLists","keys","Object","isAttached","handleQueryListener","updatedMatches","reduce","acc","media","matches","window","matchMedia","forEach","addListener","removeListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC1CJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,QAAQ,GAAGC,KAAK,IAAI;AACxB,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACD;;AACDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KALD;;AAMAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACA,WAAO,MAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACD,KAFD;AAGD,GAXQ,EAWN,CAACF,GAAD,EAAMC,OAAN,CAXM,CAAT;AAYD,CAbD;;AAeA,MAAMS,aAAa,GAAIC,OAAD,IAAa;AACjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,eAAe,GAAG,EAAxB;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,OAAZ,CAAb,CAFc,CAId;;AACA,QAAIM,UAAU,GAAG,KAAjB;;AAEA,UAAMC,mBAAmB,GAAG,MAAM;AAChC,YAAMC,cAAc,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjDD,QAAAA,GAAG,CAACC,KAAD,CAAH,GAAa,CAAC,EAAER,eAAe,CAACQ,KAAD,CAAf,IAA0BR,eAAe,CAACQ,KAAD,CAAf,CAAuBC,OAAnD,CAAd;AACA,eAAOF,GAAP;AACD,OAHsB,EAGpB,EAHoB,CAAvB,CADgC,CAKhC;;AACAR,MAAAA,aAAa,CAACM,cAAD,CAAb;AACD,KAPD;;AASA,QAAIK,MAAM,IAAIA,MAAM,CAACC,UAArB,EAAiC;AAC/B,YAAMF,OAAO,GAAG,EAAhB;AACAR,MAAAA,IAAI,CAACW,OAAL,CAAaJ,KAAK,IAAI;AACpB,YAAI,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA9B,EAAwC;AACtCR,UAAAA,eAAe,CAACQ,KAAD,CAAf,GAAyBE,MAAM,CAACC,UAAP,CAAkBd,OAAO,CAACW,KAAD,CAAzB,CAAzB;AACAC,UAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBR,eAAe,CAACQ,KAAD,CAAf,CAAuBC,OAAxC;AACD,SAHD,MAGO;AACLA,UAAAA,OAAO,CAACD,KAAD,CAAP,GAAiB,KAAjB;AACD;AACF,OAPD,EAF+B,CAW/B;;AACAT,MAAAA,aAAa,CAACU,OAAD,CAAb;AACAN,MAAAA,UAAU,GAAG,IAAb;AACAF,MAAAA,IAAI,CAACW,OAAL,CAAaJ,KAAK,IAAI;AACpB,YAAG,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA7B,EAAuC;AACrCR,UAAAA,eAAe,CAACQ,KAAD,CAAf,CAAuBK,WAAvB,CAAmCT,mBAAnC;AACD;AACF,OAJD;AAKD;;AAED,WAAO,MAAM;AACX;AACA,UAAGD,UAAH,EAAe;AACbF,QAAAA,IAAI,CAACW,OAAL,CAAaJ,KAAK,IAAI;AACpB,cAAG,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA7B,EAAuC;AACrCR,YAAAA,eAAe,CAACQ,KAAD,CAAf,CAAuBM,cAAvB,CAAsCV,mBAAtC;AACD;AACF,SAJD;AAKD;AACF,KATD;AAUD,GA/CQ,EA+CN,CAACP,OAAD,CA/CM,CAAT;AAiDA,SAAOC,UAAP;AACD,CArDD;;AAuDA,SAAQb,iBAAR,EAA2BW,aAA3B","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n    };\n  }, [ref, handler]);\n};\n\nconst useBreakpoint = (queries) => {\n  const [queryMatch, setQueryMatch] = useState(null);\n\n  useEffect(() => {\n    const mediaQueryLists = {};\n    const keys = Object.keys(queries);\n    \n    // to check whether event listener is attached or not\n    let isAttached = false;\n\n    const handleQueryListener = () => {\n      const updatedMatches = keys.reduce((acc, media) => {\n        acc[media] = !!(mediaQueryLists[media] && mediaQueryLists[media].matches);\n        return acc;\n      }, {})\n      // setting state to the updated matches when document either starts or stops matching a query\n      setQueryMatch(updatedMatches)\n    }\n\n    if (window && window.matchMedia) {\n      const matches = {};\n      keys.forEach(media => {\n        if (typeof queries[media] === 'string') {\n          mediaQueryLists[media] = window.matchMedia(queries[media]);\n          matches[media] = mediaQueryLists[media].matches\n        } else {\n          matches[media] = false\n        }\n      });\n      \n      // setting state to initial matching queries\n      setQueryMatch(matches);\n      isAttached = true;\n      keys.forEach(media => {\n        if(typeof queries[media] === 'string') {\n          mediaQueryLists[media].addListener(handleQueryListener);\n        }\n      });\n    }\n\n    return () => {\n      // if event listener is attached then remove it when deps change\n      if(isAttached) {\n        keys.forEach(media => {\n          if(typeof queries[media] === 'string') {\n            mediaQueryLists[media].removeListener(handleQueryListener);\n          }\n        });\n      }\n    }\n  }, [queries]);\n\n  return queryMatch;\n}\n\nexport {useOnClickOutside, useBreakpoint};\n"]},"metadata":{},"sourceType":"module"}